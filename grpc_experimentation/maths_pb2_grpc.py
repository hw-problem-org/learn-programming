# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import maths_pb2 as maths__pb2


class MathsStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Sum = channel.unary_unary(
                '/grpc_experimentation.Maths/Sum',
                request_serializer=maths__pb2.SumInput.SerializeToString,
                response_deserializer=maths__pb2.SumResult.FromString,
                )
        self.GetFibonacciNumberStream = channel.unary_stream(
                '/grpc_experimentation.Maths/GetFibonacciNumberStream',
                request_serializer=maths__pb2.FibonacciStart.SerializeToString,
                response_deserializer=maths__pb2.FibonacciNumber.FromString,
                )
        self.Time = channel.unary_unary(
                '/grpc_experimentation.Maths/Time',
                request_serializer=maths__pb2.TimeStamp.SerializeToString,
                response_deserializer=maths__pb2.Empty.FromString,
                )


class MathsServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Sum(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFibonacciNumberStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Time(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MathsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Sum': grpc.unary_unary_rpc_method_handler(
                    servicer.Sum,
                    request_deserializer=maths__pb2.SumInput.FromString,
                    response_serializer=maths__pb2.SumResult.SerializeToString,
            ),
            'GetFibonacciNumberStream': grpc.unary_stream_rpc_method_handler(
                    servicer.GetFibonacciNumberStream,
                    request_deserializer=maths__pb2.FibonacciStart.FromString,
                    response_serializer=maths__pb2.FibonacciNumber.SerializeToString,
            ),
            'Time': grpc.unary_unary_rpc_method_handler(
                    servicer.Time,
                    request_deserializer=maths__pb2.TimeStamp.FromString,
                    response_serializer=maths__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpc_experimentation.Maths', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Maths(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Sum(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_experimentation.Maths/Sum',
            maths__pb2.SumInput.SerializeToString,
            maths__pb2.SumResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetFibonacciNumberStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc_experimentation.Maths/GetFibonacciNumberStream',
            maths__pb2.FibonacciStart.SerializeToString,
            maths__pb2.FibonacciNumber.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Time(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_experimentation.Maths/Time',
            maths__pb2.TimeStamp.SerializeToString,
            maths__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
